uint64_t RL_binary(uint64_t base, uint64_t exp, uint64_t N);
int get_length(uint64_t input);
bool masking(uint64_t input, int n);
uint64_t long_div(uint64_t Msg, uint64_t N, int len);
uint64_t mod_exp(uint64_t A, uint64_t B, uint64_t N, int len);
uint64_t MM(uint64_t A, uint64_t B, uint64_t N, int len);

unsigned long start_time  = 0;
unsigned long end_time    = 0;
unsigned long exec_time   = 0;

void setup() {

  Serial.begin(9600);

  uint64_t M, N, e, d, C;
  N = 128255609;
  e = 17;
  d = 75431153;
  M = 52525252;

  Serial.print("Input message = ");
  //Serial.println(M);
  print_uint64_t(M);
  Serial.println();

  start_time = micros();
  C = RL_binary(M, e, N);
  end_time = micros();
  exec_time = end_time - start_time;

  Serial.print("encrypted message = ");
  print_uint64_t(C);
  Serial.print("   time taken : ");
  Serial.print(exec_time);
  Serial.println("us");
  //Serial.println(C);

  start_time = micros();
  M = RL_binary(C, d, N);
  end_time = micros();
  exec_time = end_time - start_time;

  Serial.print("decrypted message = ");
  print_uint64_t(M);
  Serial.print("   time taken : ");
  Serial.print(exec_time);
  Serial.println("us");
  //Serial.println(M);
  
  Serial.println();
}

void loop() {
}

uint64_t RL_binary(uint64_t base, uint64_t exp, uint64_t N) {
  uint64_t r = 1;
  uint64_t y = base;
  int N_length = get_length(N);
  for (int i = 0; i < 32; i++) {
    if (masking(exp, i)) {
      r = mod_exp(r, y, N, N_length);
    }
    y = mod_exp(y, y, N, N_length);
  }
  return r;
}

int get_length(uint64_t input) {
  int MSB_index = -1;
  if (input & 1) {
    MSB_index = 0;
  }
  for (int i = 1; i < 64; i++) {
    input = input >> 1;
    if (input & 1) {
      MSB_index = i;
    }
  }

  return MSB_index + 1;
}

bool masking(uint64_t input, int n) {
  input = input >> n;
  input = input & 1;
  return input;
}

uint64_t long_div(uint64_t Msg, uint64_t N, int len) {
  // multiply를 N으로 mod 한 결과값을 구하는 알고리즘
  uint64_t multiply;
  uint64_t R = power(2, len);
  multiply = Msg * R;
  int Mlength = get_length(multiply);
  uint64_t buf1 = 0;
  uint64_t buf2 = 0;

  for (int i = Mlength; i > 0; i--) {  //len+15 = multiply의 길이 = Mlength
    buf1 = buf1 << 1;
    if (masking(multiply, i - 1)) {
      buf1++;
    }
    if (buf1 >= N) {
      buf1 = buf1 - N;
      buf2 += 1;
      buf2 = buf2 << 1;
    }
  }
  return buf1;
}

uint64_t mod_exp(uint64_t A, uint64_t B, uint64_t N, int len) {
  
  /*
  uint64_t R = power(2, len);
	uint64_t MF = MM(R-N, R-N, N, len);
	uint64_t Z1 = MM(A, MF*MF, N, len);
	uint64_t Z2 = MM(B, MF*MF, N, len);
	uint64_t Z3 = MM(Z1, Z2, N, len);
	uint64_t Z4 = MM(Z3, 1, N, len);

	return Z4;
  */
	
  
	//uint64_t Z1 = MM(A, B, N, len);
	//return MM(Z1, R*R, N, len);
	

  
  uint64_t Z1 = long_div(A, N, len);
  uint64_t Z2 = long_div(B, N, len);
  uint64_t Z3 = MM(Z1, Z2, N, len);
  uint64_t Z4 = MM(Z3, 1, N, len);

  return Z4;
}

uint64_t MM(uint64_t A, uint64_t B, uint64_t N, int len) {
  uint64_t Z = 0;
  for (int i = 0; i < len; i++) {
    Z += masking(A, i) * B;
    Z += masking(Z, 0) * N;
    Z = Z >> 1;
  }
  while (Z > N) {
    Z -= N;
  }
  return Z;
}

uint64_t power(int base, int exp) {
  uint64_t result = 1;
  for (int i = 0; i < exp; i++) {
    result *= base;
  }
  return result;
}

void print_uint64_t(uint64_t num) {

  char rev[128];
  char *p = rev + 1;

  while (num > 0) {
    *p++ = '0' + (num % 10);
    num /= 10;
  }
  p--;
  /*Print the number which is now in reverse*/
  while (p > rev) {
    Serial.print(*p--);
  }
}